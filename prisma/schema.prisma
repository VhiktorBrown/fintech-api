// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  SAVINGS
  CURRENT
}
enum TransactionStatus {
  PENDING
  FAILED
  SUCCESS
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName String?
  phoneNumber String?

  dateOfBirth String?
  address String?

  email String
  password String

  bvn String?
  nin String?

  pin String?
  bvnVerified Boolean @default(false)
  ninVerified Boolean @default(false)

  accounts Account[]
}

model Account {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountNumber String?
  balance Float @default(0.0)
  canDebit Boolean @default(true)
  canCredit Boolean @default(true)
  isActive Boolean @default(true)

  accountType AccountType
  dailyTransactionLimit Float?
  lastTransactionDate DateTime?

  userId Int
  user User @relation(fields: [userId], references: [id])

  transactions Transaction[]
}

model Transaction {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
  amount Float
  reference String
  status TransactionStatus
  description String?

  recipientAccountNumber String
  senderAccountNumber String

  accountId Int
  account Account @relation(fields: [accountId], references: [id])

}